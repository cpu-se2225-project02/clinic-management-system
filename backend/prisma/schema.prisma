// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nexus {
  provider = "nexus-prisma"
}

//from here: we define models || entities inside our db
model Patient {
  id             Int              @id @default(autoincrement())
  f_name         String
  l_name         String
  m_name         String?
  suffix         String?
  sex            String
  age            Int
  address        String
  birthdate      String
  constactNo     String
  email          String?
  medicalNotes   MedicalNotes[]
  appointments   Appointment[]
  payments       Bill[]
  prescriptions  Prescription[]
  MedicalHistory MedicalHistory[]
  referral       Referral[]
  doctors        Doctor[]
}

model Appointment {
  id         Int     @id @default(autoincrement())
  name       String
  dt_start   String
  dt_end     String
  patient_id Int
  patient    Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doc_id     Int
  doctors    Doctor  @relation(fields: [doc_id], references: [id], onDelete: Cascade)
}

model Doctor {
  id           Int            @id @default(autoincrement())
  doc_name     String
  patients     Patient[]
  appointments Appointment[]
  referrals    Referral[]
  mednotes     MedicalNotes[]
}

model Bill {
  id         Int     @id @default(autoincrement())
  paymnt_dt  String?
  ammnt_cost Float
  ammnt_paid Float?
  patient_id Int
  patient    Patient @relation(fields: [patient_id], references: [id])
}

model Invoice {
  id   Int    @id @default(autoincrement())
  date String
}

model MedicalNotes {
  id         Int     @id @default(autoincrement())
  date_noted String
  med_notes  String
  title      String
  patient_id Int
  patient    Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doc_id     Int
  doctor     Doctor  @relation(fields: [doc_id], references: [id], onDelete: Cascade)

}

model MedicalHistory {
  id             Int     @id @default(autoincrement())
  diagnosis      String
  treatment_plan String
  description    String
  patient_id     Int
  patient        Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
}

model Referral {
  id         Int     @id @default(autoincrement())
  patient_id Int
  patient    Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor_id  Int
  doctor     Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  hosp_name  String
}

model Prescription {
  id         Int     @id @default(autoincrement())
  pres_name  String
  pres_dos   Int
  patient_id Int
  patient    Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
}

// medical practioner
model User {
  id                 Int      @id @default(autoincrement())
  f_name             String
  l_name             String
  email              String   @unique
  password           String
  isAdmin            Boolean  @default(value: false)
  resetPasswordToken String   @default(value: "")
  createdAt          DateTime @default(value: now())
}
